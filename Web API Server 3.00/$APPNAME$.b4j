AppType=StandardJava
Build1=Default,b4j.webapi,SQLite,server,hu2_acceptall
Build2=MySQL,b4j.webapi,MySQL,server,hu2_acceptall
File1=category.html
File2=config.example
File3=index.html
File4=main.html
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
Group=App
Library1=jcore
Library2=miniormutils
Library3=webapiutils
Module1=CategoriesApiHandler
Module2=CategoriesWebHandler
Module3=CorsFilter
Module4=FindApiHandler
Module5=HelpHandler
Module6=HttpsFilter
Module7=IndexWebHandler
Module8=ProductsApiHandler
NumberOfFiles=4
NumberOfLibraries=3
NumberOfModules=8
Version=10
@EndOfDesignText@
#Region Project Attributes
' Product: 			Web API Server
' Version: 			3.00
' Description: 		Server application project template
' Developer:		Aeric Poon (https://www.b4x.com/android/forum/members/aeric.74499/)
' License:			Open Source
' Paypal:			https://paypal.me/aeric80/

' ConfigureServer: 	ide://goto?Module=Main&Sub=AppStart
' Objects folder: 	ide://run?file=%WINDIR%\SysWOW64\explorer.exe&Args=%PROJECT%\Objects
' Publish: 			ide://run?file=%JAVABIN%\jar.exe&WorkingDirectory=../Objects&Args=-cMf&Args=Publish.zip&Args=www&Args=*.jar&Args=*.ini&Args=*.db&Args=help.html
#CommandLineArgs:
#MergeLibraries: True
#IgnoreWarnings: 32
#End Region
#If MySQL
#AdditionalJar: mysql-connector-java-8.0.30
#Else
#AdditionalJar: sqlite-jdbc-3.39.3.0
#End If
Sub Process_Globals
	Public ctx					As Map
	Private cnn 				As Conn
	Public srvr 				As Server
	Public DBConnector			As DatabaseConnector
	Public Config 				As ServerConfigurations
	Public Const VERSION_NAME	As String = "3.00"
	Private const COLOR_RED 	As Int = -65536
	Private const COLOR_BLUE 	As Int = -16776961
	Type ServerConfigurations (EnableCORS As Boolean, EnableHelp As Boolean, EnableSSL As Boolean, Port As Int, SSLPort As Int, RootUrl As String, RootPath As String, ApiName As String, ApiVersioning As Boolean, SslKeystoreDir As String, SslKeystoreFile As String, SslKeystorePassword As String, StaticFilesBrowsable As Boolean, StaticFilesFolder As String, SimpleResponse As SimpleResponse, Version As String)
End Sub

' <link>Open in browser|http://127.0.0.1:8080/</link>
Sub AppStart (Args() As String)
	srvr.Initialize("")
	srvr.AddHandler("", "IndexWebHandler", False) 							' Home handler
	srvr.AddHandler("/categories/*", "CategoriesWebHandler", False) 		' Web handler
	srvr.AddHandler("/api/categories/*", "CategoriesApiHandler", False) 	' API handler
	srvr.AddHandler("/api/products/*", "ProductsApiHandler", False) 		' API handler
	srvr.AddHandler("/api/find/*", "FindApiHandler", False) 				' API handler
	srvr.AddHandler("/help", "HelpHandler", False) 							' Help handler
	InitServer
	InitDatabase
	ApplySettings
	CreateConnection
	srvr.Start
	Log($"Web API Server (version = ${Config.Version}) is running on port ${srvr.Port}${IIf(srvr.SslPort > 0, $" (redirected to port ${srvr.SslPort})"$, "")}"$)
	Log($"Open the following URL from your web browser"$)
	Log(Config.RootUrl & Config.RootPath)
	StartMessageLoop
End Sub

Private Sub InitServer
	If File.Exists(File.DirApp, "config.ini") = False Then
		File.Copy(File.DirAssets, "config.example", File.DirApp, "config.ini")
	End If
	ctx = WebApiUtils.ReadMapFile(File.DirApp, "config.ini")
	Config.Initialize
	Config.EnableCORS = True
	#If DEBUG
	Config.EnableHelp = True
	#End If
	#If Release
	Config.EnableSSL = True
	#End If
	Config.Port = ctx.GetDefault("ServerPort", 8080)
	Config.SSLPort = ctx.GetDefault("SSLPort", 0)
	Config.RootUrl = ctx.GetDefault("ROOT_URL", "http://localhost")
	Config.RootPath = ctx.GetDefault("ROOT_PATH", "/")
	Config.ApiName = ctx.GetDefault("API_NAME", "api")
	Config.ApiVersioning = ctx.GetDefault("API_VERSIONING", "False").As(String).EqualsIgnoreCase("True")
	Config.SslKeystoreDir = ctx.GetDefault("SSL_KEYSTORE_DIR", "")
	Config.SslKeystoreFile = ctx.GetDefault("SSL_KEYSTORE_FILE", "")
	Config.SslKeystorePassword = ctx.GetDefault("SSL_KEYSTORE_PASSWORD", "")
	Config.SimpleResponse.Initialize
	Config.SimpleResponse.Enable = True
	Config.StaticFilesFolder = File.Combine(File.DirApp, "www")
	Config.StaticFilesBrowsable = False
	Config.Version = VERSION_NAME
	ctx.Put("VERSION", VERSION_NAME)
End Sub

Private Sub ApplySettings
	srvr.Port = Config.Port
	If Config.RootPath = "" Then Config.RootPath = "/"
	If Config.RootPath <> "/" Then
		If Config.RootPath.StartsWith("/") = False Then Config.RootPath = "/" & Config.RootPath
		If Config.RootPath.EndsWith("/") = False Then Config.RootPath = Config.RootPath & "/"
	End If
	ctx.Put("ROOT_PATH", Config.RootPath)
	If Config.Port <> 80 Then
		Config.RootUrl = Config.RootUrl & ":" & Config.Port
	End If
	ctx.Put("ROOT_URL", Config.RootUrl)
	ConfigureCORS
	ConfigureSSL
	ConfigureStaticFiles
End Sub

Private Sub InitDatabase
	cnn.Initialize
	cnn.DBDir = ctx.GetDefault("DbDir", "")
	cnn.DBFile = ctx.GetDefault("DbFile", "")
	cnn.DBType = ctx.GetDefault("DbType", "")
	cnn.DBHost = ctx.GetDefault("DbHost", "")
	cnn.DBPort = ctx.GetDefault("DbPort", "")
	cnn.DBName = ctx.GetDefault("DbName", "")
	cnn.DriverClass = ctx.GetDefault("DriverClass", "")
	cnn.JdbcUrl = ctx.GetDefault("JdbcUrl", "")
	cnn.User = ctx.GetDefault("User", "")
	cnn.Password = ctx.GetDefault("Password", "")
	cnn.MaxPoolSize = ctx.GetDefault("MaxPoolSize", 0)
End Sub

Private Sub CreateConnection
	Try
		LogColor("Checking database...", COLOR_BLUE)
		#If MySQL
		Dim DBType As String = "MySQL"
		#Else
		Dim DBType As String = "SQLite"
		#End If
		If cnn.DBType.EqualsIgnoreCase(DBType) = False Then
			ShowBuildConfigurationNotMatch(cnn.DBType)
			Return
		End If
		DBConnector.Initialize(cnn)
		#If MySQL
		Wait For (Main.DBConnector.DBExist2) Complete (DBFound As Boolean)
		#Else
		Dim DBFound As Boolean = DBConnector.DBExist
		#End If
		If DBFound Then
			LogColor($"${cnn.DBType} database found!"$, COLOR_BLUE)
		Else
			LogColor($"${cnn.DBType} database not found!"$, COLOR_RED)
			CreateDatabase
		End If
	Catch
		LogError(LastException.Message)
		LogColor("Error checking database!", COLOR_RED)
		Log("Application is terminated.")
		ExitApplication
	End Try
End Sub

Private Sub CreateDatabase
	Log("Creating database...")
	Select cnn.DBType.ToUpperCase
		Case "MYSQL"
			Wait For (DBConnector.DBCreateMySQL) Complete (Success As Boolean)
		Case "SQLITE"
			Wait For (DBConnector.DBCreateSQLite) Complete (Success As Boolean)
	End Select
	If Not(Success) Then
		Log("Database creation failed!")
		Return
	End If
	Log("Creating tables...")
	Dim MDB As MiniORM
	MDB.Initialize(DBOpen, DBEngine)
	MDB.UseTimestamps = True
	MDB.AddAfterCreate = True
	MDB.AddAfterInsert = True
	
	MDB.Table = "tbl_categories"
	MDB.Columns.Add(MDB.CreateORMColumn2(CreateMap("Name": "category_name")))
	MDB.Create
	
	MDB.Columns = Array("category_name")
	MDB.Insert2(Array("Hardwares"))
	MDB.Insert2(Array("Toys"))

	MDB.Table = "tbl_products"
	MDB.Columns.Add(MDB.CreateORMColumn2(CreateMap("Name": "category_id", "Type": MDB.INTEGER)))
	MDB.Columns.Add(MDB.CreateORMColumn2(CreateMap("Name": "product_code", "Length": "12")))
	MDB.Columns.Add(MDB.CreateORMColumn2(CreateMap("Name": "product_name")))
	MDB.Columns.Add(MDB.CreateORMColumn2(CreateMap("Name": "product_price", "Type": MDB.DECIMAL, "Length": "10,2", "Default": "0.00")))
	MDB.Foreign("category_id", "id", "tbl_categories", "", "")
	MDB.Create
	
	MDB.Columns = Array("category_id", "product_code", "product_name", "product_price")
	MDB.Insert2(Array(2, "T001", "Teddy Bear", 99.9))
	MDB.Insert2(Array(1, "H001", "Hammer", 15.75))
	MDB.Insert2(Array(2, "T002", "Optimus Prime", 1000))
	
	Wait For (MDB.ExecuteBatch) Complete (Success As Boolean)
	If Success Then
		LogColor("Database is created successfully!", COLOR_BLUE)
	Else
		LogColor("Database creation failed!", COLOR_RED)
	End If
	MDB.Close
End Sub

' Configure Cross Origin in JavaScript call
Private Sub ConfigureCORS
	' =========================================================
	' Note: If you have enabled JWT then you may not need this
	' =========================================================
	' allowedOrigins = "*" or "http://google.com"
	' allowedMethods = "*" or "GET,POST,HEAD"
	' allowedHeaders = "*" or "X-Requested-With,Content-Type,Accept,Origin"
	' Eg. ConfigureCORS(ROOT_PATH & "account/*", "*", "", "")
	' Reference: https://www.b4x.com/android/forum/threads/jetty-cross-origin-filter-to-be-added-to-jserver-library.85641/
	' =========================================================
	If Config.EnableCORS = False Then
		LogColor("CORS is disabled", COLOR_BLUE)
		Return
	End If
	Dim Paths As List
	Paths.Initialize
	'Paths.Add(CreateMap("path": "*", "origins": "*", "methods": "POST,PUT,DELETE", "headers": "*")) 		' All origins access (* methods not working)
	Paths.Add(CreateMap("path": "/api/*", "origins": "http://localhost, http://127.0.0.1:3000", "methods": "POST,PUT,DELETE", "headers": "*"))
	
	For Each Item As Map In Paths
		Dim path As String = Item.Get("path")
		Dim settings As Map = CreateMap( _
		"allowedOrigins": Item.Get("origins"), _
		"allowedMethods": Item.Get("methods"), _
		"allowedHeaders": Item.Get("headers"), _
		"allowCredentials": "true", _
		"preflightMaxAge": 1800, _
		"chainPreflight": "false")
		Dim cors As CorsFilter
		cors.Initialize(path, settings)
		cors.AddToServer(srvr)
	Next
	LogColor("CORS is enabled", COLOR_BLUE)
End Sub

' Configure SSL and Keystore
Private Sub ConfigureSSL
	If Config.EnableSSL = False Then
		LogColor("SSL is disabled", COLOR_BLUE)
		Return
	End If
	If Config.SSLPort = 0 Then
		LogColor("SSL Port is not set (SSL is disabled)", COLOR_RED)
		Return
	End If
	If Config.SslKeystoreDir = "" Then
		LogColor("SslKeystoreDir is not set (SSL is disabled)", COLOR_RED)
		Return
	End If
	If Config.SslKeystoreFile = "" Then
		LogColor("SslKeystoreFile is not set (SSL is disabled)", COLOR_RED)
		Return
	End If

	Dim ssl As SslConfiguration
	ssl.Initialize
	ssl.SetKeyStorePath(Config.SslKeystoreDir, Config.SslKeystoreFile)
	ssl.KeyStorePassword = Config.SslKeystorePassword
	'ssl.KeyManagerPassword = ""
	srvr.SetSslConfiguration(ssl, Config.SSLPort)
	'add filter to redirect all traffic from http to https (optional)
	srvr.AddFilter("/*", "HttpsFilter", False)
	If Config.SSLPort <> 443 Then
		Config.RootUrl = Config.RootUrl & ":" & Config.SSLPort
	End If
	Config.RootUrl = Config.RootUrl.Replace("http:", "https:")
	ctx.Put("ROOT_URL", Config.RootUrl)
	LogColor("SSL is enabled", COLOR_BLUE)
End Sub

' Configure permission for browsing static files folder
Private Sub ConfigureStaticFiles
	srvr.StaticFilesFolder = Config.StaticFilesFolder
	srvr.SetStaticFilesOptions(CreateMap("dirAllowed": Config.StaticFilesBrowsable))
End Sub

Private Sub ShowBuildConfigurationNotMatch (DBType As String)
	LogColor($"Build configuration does not match ${DBType}!"$, COLOR_RED)
	LogColor($"Application is terminated."$, COLOR_RED)
	ExitApplication
End Sub

Public Sub DBEngine As String
	Return DBConnector.DBEngine
End Sub

Public Sub DBOpen As SQL
	Return DBConnector.DBOpen
End Sub

Public Sub DBClose
	DBConnector.DBClose
End Sub